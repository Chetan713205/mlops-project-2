Data Versioning and Code Versioning:
------------------------------------
1. Create a seperate bucket in GCP where we will be doing our Data Versioning
2. Edit acess, enter your service account in add principle, grant storage object admin, storage obj viewer access
3. In requirenemts.txt list "dvc"
	* Git : used for code tracking
	* DVC : used for artifacts tracking
4. Initialize git and dvc
	* git init
	* dvc init
5. In root directory create file .gitignore add the folders to be ignored
	artifacts/raw/
	artifacts/processed/
	artifacts/model/
	artifacts/weights/
	artifacts/model_checkpoint/         Why? Because we want them to be tracked by dvc, 
					    One folder can be tracked by one Scource Code Manager dvc/git
6. git add .
7. git commit -m "commit"
8. Create new github repo give name and create
9. In github "â€¦or create a new repository on the command line" section
   Copy and paste the following commands
	* git branch -M main
	* git remote add origin https://github.com/Chetan713205/mlops-project-2.git
	* git push origin main  --> PUSHES ALL CODES TO GitHub
10. In order to track artifacts folder by dvc
	* dvc add artifacts/raw
	* dvc add artifacts/processed
	* dvc add artifacts/model
	* dvc add artifacts/weights
	* dvc add artifacts/model_checkpoint    #We want Git to track .DVC files generated
11. dvc status
12. So Pushing the codes to GitHub again
	* git add .
	* git commit -m "commit"
	* git push origin main                 # In the artifacts folder we have .DVC file in GitHub
13. In order to store the dvc file into the newly created bucket we need to connect
	* add in requirements.txt "dvc-gs" --> pip install -e .
	* dvc remote add -d myremote gs://my-dvc-bucket93/   
	* dvc push  
	---------- If it doesnot works ---------- 
	* gcloud auth activate-service-account <SERVICE_ACCOUNT_EMAIL> --key-file="D:\gen-lang-client-0389229415-58240cc01804.json"
	* gcloud auth list
	* gsutil ls gs://my-dvc-bucket93/
	* dvc push                              # GCP stores data in form of hashing algorithm       
14. In order to pull the files from dvc to local storage system
	* dvc pull

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------
1. utils -> helpers.py -> add remaning functions of notebook 
2. pipeline -> prediction_pipeline.py -> use the last function of notebook
3. In root dir create application.py -> assign the recommendation system with flask app
4. template -> index.html -> website html code
5. static -> style.css -> link index.html with this .css file
6. generate a code from chatGPT external css

